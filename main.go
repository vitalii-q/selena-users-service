package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/gin-gonic/gin"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/sirupsen/logrus"

	"github.com/vitalii-q/selena-users-service/config"
	"github.com/vitalii-q/selena-users-service/internal/handlers"
	"github.com/vitalii-q/selena-users-service/internal/services"
	"github.com/vitalii-q/selena-users-service/internal/utils"
)

func init() {
	setupLogger() // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
}

func main() {
	// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel() // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
	dbPool, err := pgxpool.New(ctx, getDatabaseURL())
	if err != nil {
		log.Fatalf("Unable to connect to database: %v", err)
	}
	defer dbPool.Close() // –ó–∞–∫—Ä–æ–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã

	// –°–æ–∑–¥–∞—ë–º —Ö–µ—à–µ—Ä –ø–∞—Ä–æ–ª–µ–π (–æ–±—ã—á–Ω—ã–π)
	passwordHasher := &utils.BcryptHasher{} 

	// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	userService := services.NewUserServiceImpl(dbPool, passwordHasher)
	userHandler := handlers.NewUserHandler(userService)

	authHandler := &handlers.AuthHandler{
		UserService: userService,
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	port := os.Getenv("APP_PORT")
	if port == "" {
		port = "9065" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 9065
	}
	r := setupRouter(userHandler, authHandler)

	server := &http.Server{
		Addr:    ":" + port,
		Handler: r,
	}

	go func() {
		logrus.Infof("Starting server on port %s...", port)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logrus.Fatalf("Server failed: %v", err)
		}
	}()

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ctrl+C)
	sig := make(chan os.Signal, 1)
	signal.Notify(sig, os.Interrupt, syscall.SIGTERM)
	<-sig

	log.Println("Shutting down server...")
	cancel()             // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	server.Shutdown(ctx) // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
}

// setupLogger –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
func setupLogger() {
	logrus.SetLevel(logrus.DebugLevel)         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	logrus.SetFormatter(&logrus.TextFormatter{ // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
		FullTimestamp: true,
		ForceColors:   true,
	})
	logrus.SetOutput(os.Stdout)
}

// getPort –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getPort() string {
	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	configPath := os.Getenv("CONFIG_PATH")
	if configPath == "" {
		// –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		configPath = "/config/config.yaml"
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.LoadConfig(configPath)
	if err != nil {
		logrus.Fatalf("Error loading config: %v", err)
	}

	port := cfg.Server.Port
	return port
}

// setupRouter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
func setupRouter(userHandler *handlers.UserHandler, authHandler *handlers.AuthHandler) *gin.Engine {
	r := gin.Default()

	// üëá –õ–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	r.Use(func(c *gin.Context) {
		logrus.Infof("Incoming request: %s %s", c.Request.Method, c.Request.URL.Path)
		c.Next()
	})

	r.GET("/", handleRoot)
	r.GET("/health", handleHealth)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	r.POST("/users", userHandler.CreateUserHandler)
	r.GET("/users/:id", userHandler.GetUserHandler)
	r.PUT("/users/:id", userHandler.UpdateUserHandler)
	r.DELETE("/users/:id", userHandler.DeleteUserHandler)

	r.GET("/oauth2/authorize", handlers.GetAuthorize)
	r.POST("/oauth2/token", handlers.PostToken)

	r.POST("/login", authHandler.LoginHandler)

	return r
}

// handleRoot –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫ "/"
func handleRoot(c *gin.Context) {
	logrus.Info("GET / hit")
	c.JSON(http.StatusOK, gin.H{"message": "Hello, users-service!"})
}

// handleHealth –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫ "/health"
func handleHealth(c *gin.Context) {
	logrus.Info("Health check request")
	c.JSON(http.StatusOK, gin.H{"status": "ok"})
}

func getDatabaseURL() string {
	// –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
	dbUser := os.Getenv("POSTGRES_USER")
	dbPassword := os.Getenv("POSTGRES_PASSWORD")
	dbName := os.Getenv("POSTGRES_NAME")
	dbPort := os.Getenv("POSTGRES_PORT")

	if dbUser == "" || dbPassword == "" || dbName == "" || dbPort == "" {
		log.Fatal("One or more required database environment variables are missing")
	}

	databaseUrl := fmt.Sprintf("postgres://%s:%s@postgres:5432/%s?sslmode=disable",
		dbUser, dbPassword, dbName)

	return databaseUrl
}
